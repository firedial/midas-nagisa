module View.Terminal.Out exposing (view, getBalanceFromString, getString)

import Html exposing (..)
import Html.Attributes
import Html.Events
import Http exposing (..)
import Maybe exposing (andThen, withDefault)
import String exposing (split, join, toInt)
import List exposing (head, tail, filter)
import Tuple

import Model.Balance
import Model.Attribute as Ma
import Repository.AttributeCollection
import Util.Predictive exposing (getWordWithDotCommand, showAttributes, getPredictive)

type Panel
    = Amount
    | Item
    | Kind
    | Purpose
    | Place
    | Date
    | None

getString : Repository.AttributeCollection.Model -> String -> String
getString acs strd =
    let
        str = split "." strd |> head |> withDefault ""
        panel = getInputPanelName str
        lastd = split " " strd |> List.reverse |> head |> withDefault ""
        lastword = 
            case panel of
                Kind -> getWordWithDotCommand acs.kindAttributeModel.attributes lastd
                Purpose -> getWordWithDotCommand acs.purposeAttributeModel.attributes lastd
                Place -> getWordWithDotCommand acs.placeAttributeModel.attributes lastd
                _ -> lastd
    in
    split " " str |> List.reverse |> tail |> withDefault [] |> (::) lastword |> List.reverse |> String.join " "

view : Repository.AttributeCollection.Model -> String -> Html msg
view acs strd =
    let
        str = split "." strd |> head |> withDefault ""
        balance = split " " str |> tail |> withDefault [] |> join " " |> getBalanceFromString acs
        panel = getInputPanelName str
        last = split " " str |> List.reverse |> head |> withDefault ""
    in
    -- div [] [ text balanceString ]
    div [] 
        [ div [] [ Model.Balance.htmlMsg balance ]
        , case panel of
            Kind -> getPredictive acs.kindAttributeModel.attributes last |> showAttributes
            Purpose -> getPredictive acs.purposeAttributeModel.attributes last |> showAttributes
            Place -> getPredictive acs.placeAttributeModel.attributes last |> showAttributes
            _ -> div [] []
        ]

getInputPanelName : String -> Panel
getInputPanelName str =
    let
        len = split " " str |> List.length
    in
    case len of
        2 -> Amount
        3 -> Item
        4 -> Kind
        5 -> Purpose
        6 -> Place
        7 -> Date
        _ -> None

